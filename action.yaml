name: infracost-core
description: Infracost with current vs future cost table, emojis, and PR mentions
branding:
  icon: dollar-sign
  color: green

inputs:
  working_dir:
    description: Path to the Terraform working directory (where tfplan.json is located)
    required: false
    default: .
  currency:
    description: Currency code to display costs in (e.g., USD, INR, SEK)
    required: false
    default: INR
  infracost_version:
    description: Version of Infracost CLI to install (use "latest" for newest release)
    required: false
    default: latest
  comment_marker:
    description: Marker used to identify/update sticky PR comments
    required: false
    default: "<!-- infracost-comment -->"
  infracost_api_key:
    description: API key for Infracost Cloud (optional, can also be set via env)
    required: false
  ping_author:
    description: Whether to tag the PR author in the comment ("true" or "false")
    required: false
    default: "true"
  mention_handles:
    description: Extra GitHub handles or teams to mention in the comment (comma-separated)
    required: false
    default: ""
  base_infracost_path:
    description: Path to a baseline Infracost JSON file to diff against
    required: false
    default: ""
  base_tfplan_path:
    description: Path to a baseline Terraform plan JSON file to diff against
    required: false
    default: ""
  compare_with_git_base:
    description: If true, compare with the git base branch when running on pull_request
    required: false
    default: "true"

runs:
  using: composite
  steps:
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.12"

    - name: Install Infracost
      shell: bash
      run: |
        set -euo pipefail
        if [ "${{ inputs.infracost_version }}" = "latest" ]; then
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
        else
          ver="v${{ inputs.infracost_version }}"
          curl -fsSLO "https://github.com/infracost/infracost/releases/download/${ver}/infracost-linux-amd64.tar.gz"
          curl -fsSLO "https://github.com/infracost/infracost/releases/download/${ver}/checksums.txt"
          grep "infracost-linux-amd64.tar.gz" checksums.txt | sha256sum -c -
          tar -xzf infracost-linux-amd64.tar.gz
          mkdir -p "$HOME/.infracost/bin"
          mv infracost-linux-amd64 "$HOME/.infracost/bin/infracost"
        fi
        echo "$HOME/.infracost/bin" >> "$GITHUB_PATH"

    - name: Run Infracost
      shell: bash
      working-directory: ${{ inputs.working_dir }}
      env:
        INFRACOST_API_KEY: ${{ inputs.infracost_api_key || env.INFRACOST_API_KEY }}
        INFRACOST_CURRENCY: ${{ inputs.currency }}
        INFRACOST_LOG_LEVEL: debug
      run: |
        set -euo pipefail
        mode="breakdown"

        echo "INPUT_base_infracost_path='${{ inputs.base_infracost_path }}'"
        echo "INPUT_base_tfplan_path='${{ inputs.base_tfplan_path }}'"

        resolve() {
          p="${1:-}"
          [ -z "$p" ] && { echo ""; return; }
          if [ -f "$p" ]; then echo "$p"; return; fi
          if [ -f "$GITHUB_WORKSPACE/$p" ]; then echo "$GITHUB_WORKSPACE/$p"; return; fi
          echo ""
        }

        BASE_INFRA="$(resolve "${{ inputs.base_infracost_path }}")"
        BASE_TFPLAN="$(resolve "${{ inputs.base_tfplan_path }}")"
        echo "RESOLVED_base_infracost_path='$BASE_INFRA'"
        echo "RESOLVED_base_tfplan_path='$BASE_TFPLAN'"

        if [ -n "${{ inputs.base_tfplan_path }}" ] && [ -z "$BASE_TFPLAN" ]; then
          echo "::error::base_tfplan_path was provided but file not found. Pwd=$(pwd)"
          echo "::group::Workspace tree (_base)"
          ls -la "$GITHUB_WORKSPACE" || true
          ls -la "$GITHUB_WORKSPACE/_base" || true
          find "$GITHUB_WORKSPACE/_base" -maxdepth 5 -type f -name 'tfplan.json' 2>/dev/null || true
          echo "::endgroup::"
          exit 1
        fi

        if [ -n "$BASE_INFRA" ]; then
          infracost diff \
            --path tfplan.json \
            --compare-to "$BASE_INFRA" \
            --format json --out-file infracost.out.json
          mode="diff"

        elif [ -n "$BASE_TFPLAN" ]; then
          infracost breakdown \
            --path "$BASE_TFPLAN" \
            --format json --out-file .infracost-base.json

          infracost diff \
            --path tfplan.json \
            --compare-to .infracost-base.json \
            --format json --out-file infracost.out.json
          mode="diff"

        elif [ "${{ inputs.compare_with_git_base }}" = "true" ] && [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
          infracost diff \
            --path tfplan.json \
            --compare-to git:base \
            --format json --out-file infracost.out.json
          mode="diff"

        else
          test -f tfplan.json
          infracost breakdown \
            --path tfplan.json \
            --format json --out-file infracost.out.json
        fi

        echo "$mode" > .infracost_mode

        echo "::group::Sanity: PR plan pricing table"
        infracost breakdown --path tfplan.json --format table --show-skipped || true
        echo "::endgroup::"

        echo "::group::Sanity: diff summary JSON"
        jq '{currency, summary, n_projects: ((.projects // []) | length)}' infracost.out.json || true
        jq -r '
          [
            "currency=" + (.currency // "n/a"),
            "future="   + ((.summary.totalMonthlyCost    // 0 | tostring)),
            "current="  + ((.summary.pastTotalMonthlyCost // 0 | tostring)),
            "delta="    + ((.summary.diffTotalMonthlyCost // 0 | tostring))
          ] | join("\n")
        ' infracost.out.json || true
        echo "::endgroup::"

    - name: Build visual table
      shell: bash
      working-directory: ${{ inputs.working_dir }}
      env:
        PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        MENTION_HANDLES: ${{ inputs.mention_handles }}
        INPUT_COMMENT_MARKER: ${{ inputs.comment_marker }}
      run: |
        set -euo pipefail
        python "$GITHUB_WORKSPACE/.github/scripts/infracost_comment.py" \
          "$GITHUB_WORKSPACE/${{ inputs.working_dir }}/infracost.out.json" \
          "$GITHUB_WORKSPACE/${{ inputs.working_dir }}/infracost_comment.md"

    - name: Post PR comment
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const { owner, repo } = context.repo;
          const pr = context.payload.pull_request;
          if (!pr) return;
          const issue_number = pr.number;
          const pingAuthor = '${{ inputs.ping_author }}'.toLowerCase() === 'true';
          const author = pr.user.login;
          const bodyBase = fs.readFileSync(path.join(process.env.GITHUB_WORKSPACE, '${{ inputs.working_dir }}', 'infracost_comment.md'), 'utf8');
          const body = (pingAuthor ? `@${author}\n\n` : '') + bodyBase;
          const marker = '${{ inputs.comment_marker }}';
          const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
          const existing = comments.find(c => c.body && c.body.includes(marker));
          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body });
          }