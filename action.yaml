name: infracost-core
description: Infracost on tfplan.json with monthly, daily, hourly and PR mentions
branding:
  icon: dollar-sign
  color: green

inputs:
  working_dir:
    required: false
    default: .
  currency:
    required: false
    default: SEK
  behavior:
    required: false
    default: update
  infracost_version:
    required: false
    default: latest
  comment_marker:
    required: false
    default: "<!-- infracost-comment -->"
  infracost_api_key:
    required: false
  ping_author:
    required: false
    default: "true"
  mention_handles:
    required: false
    default: ""

outputs:
  total_monthly_cost:
    value: ${{ steps.set_outputs.outputs.total_monthly_cost }}
  diff_monthly_cost:
    value: ${{ steps.set_outputs.outputs.diff_monthly_cost }}
  currency:
    value: ${{ steps.set_outputs.outputs.currency }}
  total_daily_cost:
    value: ${{ steps.set_outputs.outputs.total_daily_cost }}
  diff_daily_cost:
    value: ${{ steps.set_outputs.outputs.diff_daily_cost }}
  total_hourly_cost:
    value: ${{ steps.set_outputs.outputs.total_hourly_cost }}
  diff_hourly_cost:
    value: ${{ steps.set_outputs.outputs.diff_hourly_cost }}

runs:
  using: composite
  steps:
    - name: Install Infracost
      shell: bash
      run: |
        set -euo pipefail
        if [ "${{ inputs.infracost_version }}" = "latest" ]; then
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
        else
          ver="v${{ inputs.infracost_version }}"
          curl -fsSLO "https://github.com/infracost/infracost/releases/download/${ver}/infracost-linux-amd64.tar.gz"
          curl -fsSLO "https://github.com/infracost/infracost/releases/download/${ver}/checksums.txt"
          grep "infracost-linux-amd64.tar.gz" checksums.txt | sha256sum -c -
          tar -xzf infracost-linux-amd64.tar.gz
          mkdir -p "$HOME/.infracost/bin"
          mv infracost-linux-amd64 "$HOME/.infracost/bin/infracost"
        fi
        echo "$HOME/.infracost/bin" >> "$GITHUB_PATH"

    - name: Run Infracost
      shell: bash
      working-directory: ${{ inputs.working_dir }}
      env:
        INFRACOST_API_KEY: ${{ inputs.infracost_api_key || env.INFRACOST_API_KEY }}
        INFRACOST_CURRENCY: ${{ inputs.currency }}
      run: |
        set -euo pipefail
        test -f tfplan.json
        infracost breakdown --path tfplan.json --format json --out-file infracost.json
        infracost output --path infracost.json --format json --out-file infracost.out.json

    - id: set_outputs
      name: Compute outputs and compose comment
      shell: bash
      working-directory: ${{ inputs.working_dir }}
      run: |
        set -euo pipefail

        total=$(jq -r '
          (.summary.totalMonthlyCost // (
            [ .projects[]?.breakdown.totalMonthlyCost // 0 | tonumber ] | add
          ) // 0) | tonumber
        ' infracost.out.json)

        diff=$(jq -r '
          (.summary.diffTotalMonthlyCost // 0) | tonumber
        ' infracost.out.json)

        curr=$(jq -r '.currency // "USD"' infracost.out.json)

        daily_total=$(awk -v m="$total" 'BEGIN{printf "%.2f", (m/30)}')
        daily_diff=$(awk -v d="$diff"  'BEGIN{printf "%.2f", (d/30)}')
        hourly_total=$(awk -v m="$total" 'BEGIN{printf "%.4f", (m/730)}')
        hourly_diff=$(awk -v d="$diff"  'BEGIN{printf "%.4f", (d/730)}')

        monthly_total_fmt=$(awk -v m="$total" 'BEGIN{printf "%.2f", m}')
        monthly_diff_fmt=$(awk -v d="$diff"  'BEGIN{printf "%.2f", d}')

        echo "total_monthly_cost=$monthly_total_fmt" >> "$GITHUB_OUTPUT"
        echo "diff_monthly_cost=$monthly_diff_fmt"   >> "$GITHUB_OUTPUT"
        echo "currency=$curr"                        >> "$GITHUB_OUTPUT"
        echo "total_daily_cost=$daily_total"         >> "$GITHUB_OUTPUT"
        echo "diff_daily_cost=$daily_diff"           >> "$GITHUB_OUTPUT"
        echo "total_hourly_cost=$hourly_total"       >> "$GITHUB_OUTPUT"
        echo "diff_hourly_cost=$hourly_diff"         >> "$GITHUB_OUTPUT"

        arrow="‚ÜîÔ∏è"
        sign=""
        awk "BEGIN{exit !($diff > 0)}" && { arrow="‚¨ÜÔ∏è"; sign="+"; } || true
        awk "BEGIN{exit !($diff < 0)}" && { arrow="‚¨áÔ∏è"; sign="";  } || true

        daily_diff_fmt=$(awk -v x="$daily_diff" 'BEGIN{printf (x>=0?"+%.2f":"%.2f"), x}')
        hourly_diff_fmt=$(awk -v x="$hourly_diff" 'BEGIN{printf (x>=0?"+%.4f":"%.4f"), x}')

        {
          printf "### üí∏ Infracost Report\n"
          printf "**üìÖ Monthly:** %s %s  |  %s Œî %s %s\n" "$curr" "$monthly_total_fmt" "$arrow" "$curr" "${sign}${monthly_diff_fmt}"
          printf "**üóìÔ∏è Daily:** %s %s  |  %s Œî %s %s\n" "$curr" "$daily_total"       "$arrow" "$curr" "$daily_diff_fmt"
          printf "**‚è±Ô∏è Hourly:** %s %s  |  %s Œî %s %s\n" "$curr" "$hourly_total"     "$arrow" "$curr" "$hourly_diff_fmt"
          printf "\n%s\n" "${{ inputs.comment_marker }}"
        } > infracost_comment.md
  
    - name: Post PR comment
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
    
          const { owner, repo } = context.repo;
          const pr = context.payload.pull_request;
          if (!pr) {
            core.info('No PR context; skipping comment.');
            return;
          }
    
          const issue_number = pr.number;
          const author = pr.user.login;
    
          const pingAuthor = '${{ inputs.ping_author }}'.toLowerCase() === 'true';
          const extraMentions = '${{ inputs.mention_handles }}'
            .split(',')
            .map(s => s.trim())
            .filter(Boolean)
            .map(h => h.startsWith('@') ? h : `@${h}`)
            .join(' ');
    
          const mentionLine = [ pingAuthor ? `@${author}` : null, extraMentions || null ]
            .filter(Boolean)
            .join(' ');
    
          const bodyBase = fs.readFileSync(
            path.join(process.env.GITHUB_WORKSPACE, '${{ inputs.working_dir }}', 'infracost_comment.md'),
            'utf8'
          );
    
          const marker = '${{ inputs.comment_marker }}';
          const body = (mentionLine ? `${mentionLine}\n\n` : '') + bodyBase;
    
          const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
          const existing = comments.find(c => c.body && c.body.includes(marker));
    
          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body });
          }
