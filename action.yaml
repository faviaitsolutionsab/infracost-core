name: infracost-core
description: Infracost with current vs future cost table, emojis, and PR mentions
branding:
  icon: dollar-sign
  color: green

inputs:
  working_dir:
    required: false
    default: .
  currency:
    required: false
    default: INR
  infracost_version:
    required: false
    default: latest
  comment_marker:
    required: false
    default: "<!-- infracost-comment -->"
  infracost_api_key:
    required: false
  ping_author:
    required: false
    default: "true"
  mention_handles:
    required: false
    default: ""
  base_infracost_path:
    required: false
    default: ""
  base_tfplan_path:
    required: false
    default: ""
  compare_with_git_base:
    required: false
    default: "true"

runs:
  using: composite
  steps:
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.12"

    - name: Install Infracost
      shell: bash
      run: |
        set -euo pipefail
        if [ "${{ inputs.infracost_version }}" = "latest" ]; then
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
        else
          ver="v${{ inputs.infracost_version }}"
          curl -fsSLO "https://github.com/infracost/infracost/releases/download/${ver}/infracost-linux-amd64.tar.gz"
          curl -fsSLO "https://github.com/infracost/infracost/releases/download/${ver}/checksums.txt"
          grep "infracost-linux-amd64.tar.gz" checksums.txt | sha256sum -c -
          tar -xzf infracost-linux-amd64.tar.gz
          mkdir -p "$HOME/.infracost/bin"
          mv infracost-linux-amd64 "$HOME/.infracost/bin/infracost"
        fi
        echo "$HOME/.infracost/bin" >> "$GITHUB_PATH"

    - name: Run Infracost
      shell: bash
      working-directory: ${{ inputs.working_dir }}
      env:
        INFRACOST_API_KEY: ${{ inputs.infracost_api_key || env.INFRACOST_API_KEY }}
        INFRACOST_CURRENCY: ${{ inputs.currency }}
      run: |
        set -euo pipefail
        mode="breakdown"
        resolve() {
          p="${1:-}"
          [ -z "$p" ] && { echo ""; return; }
          [ -f "$p" ] && { echo "$p"; return; }
          [ -f "$GITHUB_WORKSPACE/$p" ] && { echo "$GITHUB_WORKSPACE/$p"; return; }
          echo ""
        }
        BASE_INFRA="$(resolve "${{ inputs.base_infracost_path }}")"
        BASE_TFPLAN="$(resolve "${{ inputs.base_tfplan_path }}")"
        if [ -n "$BASE_INFRA" ]; then
          infracost diff \
            --path tfplan.json \
            --compare-to "$BASE_INFRA" \
            --format json --out-file infracost.out.json
          mode="diff"
        elif [ -n "$BASE_TFPLAN" ]; then
          infracost breakdown \
            --path "$BASE_TFPLAN" \
            --format json --out-file .infracost-base.json
          infracost diff \
            --path tfplan.json \
            --compare-to .infracost-base.json \
            --format json --out-file infracost.out.json
          mode="diff"
        elif [ "${{ inputs.compare_with_git_base }}" = "true" ] && [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
          infracost diff \
            --path tfplan.json \
            --compare-to git:base \
            --format json --out-file infracost.out.json
          mode="diff"
        else
          test -f tfplan.json
          infracost breakdown \
            --path tfplan.json \
            --format json --out-file infracost.out.json
        fi
        echo "$mode" > .infracost_mode

    - name: Build visual table
      shell: bash
      working-directory: ${{ inputs.working_dir }}
      env:
        PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        MENTION_HANDLES: ${{ inputs.mention_handles }}
        INPUT_COMMENT_MARKER: ${{ inputs.comment_marker }}
      run: |
        set -euo pipefail
        python "$GITHUB_WORKSPACE/.github/scripts/infracost_comment.py" \
          "$GITHUB_WORKSPACE/${{ inputs.working_dir }}/infracost.out.json" \
          "$GITHUB_WORKSPACE/${{ inputs.working_dir }}/infracost_comment.md"

    - name: Post PR comment
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const { owner, repo } = context.repo;
          const pr = context.payload.pull_request;
          if (!pr) return;
          const issue_number = pr.number;
          const pingAuthor = '${{ inputs.ping_author }}'.toLowerCase() === 'true';
          const author = pr.user.login;
          const bodyBase = fs.readFileSync(path.join(process.env.GITHUB_WORKSPACE, '${{ inputs.working_dir }}', 'infracost_comment.md'), 'utf8');
          const body = (pingAuthor ? `@${author}\n\n` : '') + bodyBase;
          const marker = '${{ inputs.comment_marker }}';
          const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
          const existing = comments.find(c => c.body && c.body.includes(marker));
          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body });
          }
