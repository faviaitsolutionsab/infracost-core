name: "Infracost Core"
description: "Render current vs future cloud cost table and comment on PR"
author: faviaitsolutionab@gmail.com

branding:
  icon: cloud
  color: blue
  
inputs:
  working_dir:
    description: "Directory that contains tfplan.json for the PR plan"
    required: true
  base_tfplan_path:
    description: "Absolute path to baseline tfplan.json to compare against"
    required: true
  currency:
    description: "Currency code, e.g., USD, EUR, INR"
    required: false
    default: USD
  ping_author:
    description: "Ping PR author in the comment"
    required: false
    default: "true"
  mention_handles:
    description: "Space-separated or @-prefixed handles to mention"
    required: false
    default: ""
  infracost_version:
    description: "Infracost CLI version"
    required: false
    default: "latest"
  comment_marker:
    description: "Marker to allow updates"
    required: false
    default: "<!-- infracost-comment -->"

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v6
      with:
        python-version: "3.x"

    - name: Install Infracost
      shell: bash
      run: |
        set -euo pipefail
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
        infracost --version

    - name: Resolve paths
      id: paths
      shell: bash
      run: |
        set -euo pipefail
        WD="${{ inputs.working_dir }}"
        BASE="${{ inputs.base_tfplan_path }}"

        if [[ "$WD" != /* ]]; then WD="${GITHUB_WORKSPACE%/}/$WD"; fi
        if [[ ! -f "$WD/tfplan.json" ]]; then
          echo "Error: PR tfplan.json not found at $WD/tfplan.json" >&2
          exit 1
        fi
        if [[ ! -f "$BASE" ]]; then
          echo "Error: base_tfplan_path not found: $BASE" >&2
          exit 1
        fi

        echo "wd=$WD" >> "$GITHUB_OUTPUT"
        echo "base=$BASE" >> "$GITHUB_OUTPUT"

    - name: Build diff JSON (baseline vs PR)
      shell: bash
      env:
        INFRACOST_API_KEY: ${{ env.INFRACOST_API_KEY }}
        INFRACOST_CURRENCY: ${{ inputs.currency }}
      run: |
        set -euo pipefail
        WD='${{ steps.paths.outputs.wd }}'
        BASE='${{ steps.paths.outputs.base }}'

        infracost breakdown \
          --path "$BASE" \
          --format json \
          --out-file "$WD/.infracost-base.json"

        infracost breakdown \
          --path "$WD/tfplan.json" \
          --format json \
          --out-file "$WD/.infracost-pr.json"

        infracost diff \
          --path "$WD/.infracost-pr.json" \
          --compare-to "$WD/.infracost-base.json" \
          --format json \
          --out-file "$WD/infracost.out.json"

    - name: Generate PR comment markdown
      shell: bash
      env:
        PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        MENTION_HANDLES: ${{ inputs.mention_handles }}
        INPUT_COMMENT_MARKER: ${{ inputs.comment_marker }}
        BASE_BREAKDOWN_PATH: ${{ steps.paths.outputs.wd }}/.infracost-base.json
        PR_BREAKDOWN_PATH:   ${{ steps.paths.outputs.wd }}/.infracost-pr.json
      run: |
        set -euo pipefail
        WD='${{ steps.paths.outputs.wd }}'
        PY="$GITHUB_WORKSPACE/.github/scripts/infracost_comment.py"
        python "$PY" "$WD/infracost.out.json" "$WD/infracost_comment.md"

    - name: Create/Update PR comment
      uses: actions/github-script@v7
      env:
        PING_AUTHOR: ${{ inputs.ping_author }}
        WD: ${{ steps.paths.outputs.wd }}
        MARKER: ${{ inputs.comment_marker }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const { owner, repo } = context.repo;
          const pr = context.payload.pull_request;
          if (!pr) return;
          const issue_number = pr.number;
          const pingAuthor = (process.env.PING_AUTHOR || 'true').toLowerCase() === 'true';
          const author = pr.user.login;
          const bodyBase = fs.readFileSync(path.join(process.env.WD, 'infracost_comment.md'), 'utf8');
          const body = (pingAuthor ? `@${author}\n\n` : '') + bodyBase;
          const marker = process.env.MARKER || '<!-- infracost-comment -->';
          const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
          const existing = comments.find(c => c.body && c.body.includes(marker));
          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body });
          }
